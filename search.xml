<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AboutMe</title>
    <url>/2020/04/20/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
    <content><![CDATA[<p>​        这里是一名信息专业在读学生，时不时记录一些生活和学习的感悟，偶尔也分享几点奇思妙想。本科四年，有着大把美好时光，各种有趣的知识等待我去探索，所以希望能在这篇博客中记录下大学生活有趣的点滴。</p>
<a id="more"></a>

<img src="/2020/04/20/%E5%85%B3%E4%BA%8E%E6%88%91/dragon.jpg" alt="test2" style="zoom:33%;">

<p>​        因为我对前端开发相关技术不太熟练，所以这个网站也有很多布置尚不理想，以后也会力争开发更好的页面，让我们一起加油！</p>
<p>​        （方便本网站自引用，就把支付宝和微信的打赏二维码放在这里）</p>
<p><img src="/2020/04/20/%E5%85%B3%E4%BA%8E%E6%88%91/alipay.jpg" alt="支付宝" style="zoom: 25%;"> <img src="/2020/04/20/%E5%85%B3%E4%BA%8E%E6%88%91/wechat.jpg" alt="wechat" style="zoom:33%;"></p>
]]></content>
  </entry>
  <entry>
    <title>Markdown基本语法笔记</title>
    <url>/2020/04/19/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>​        搭建自己博客的第一天，学习一下程序员必备Markdown语法。</p>
<a id="more"></a>

<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标题语法</span></span><br><span class="line"># <span class="number">1</span></span><br><span class="line">## <span class="number">2</span></span><br><span class="line">...</span><br><span class="line">###### <span class="number">6</span></span><br></pre></td></tr></table></figure>



<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加粗</span></span><br><span class="line">	**内容**</span><br><span class="line"><span class="comment">//删除线</span></span><br><span class="line">	~~内容~~</span><br><span class="line"><span class="comment">//斜体</span></span><br><span class="line">	*内容*</span><br><span class="line"><span class="comment">//斜体加粗</span></span><br><span class="line">	***内容***</span><br></pre></td></tr></table></figure>



<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用内容</span></span><br><span class="line">    &gt;内容</span><br><span class="line">    &gt;&gt;内容（嵌套）</span><br><span class="line">    &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;内容</span><br></pre></td></tr></table></figure>



<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分割线</span></span><br><span class="line">	---</span><br><span class="line"><span class="comment">//全屏分割线</span></span><br><span class="line">	***</span><br></pre></td></tr></table></figure>



<h2 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在线图片/本地图片</span></span><br><span class="line">	![图片标题名](图片路径 <span class="string">"图片标题(鼠标移上去显示的内容，可不填)"</span>)</span><br></pre></td></tr></table></figure>



<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line">	[内容名](地址)</span><br></pre></td></tr></table></figure>



<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;无序列表</span><br><span class="line">    - 目录1</span><br><span class="line">    - 目录2</span><br><span class="line">&#x2F;&#x2F;有序列表 1 . 名称</span><br></pre></td></tr></table></figure>



<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(语法比较麻烦，可通过右键生成)</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p>MarkDown基本语法. <a href="https://www.jianshu.com/p/191d1e21f7ed/" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed/</a> .</p>
</blockquote>
]]></content>
      <tags>
        <tag>软件学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>控制台小程序|自动表白机</title>
    <url>/2020/04/20/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%87%AA%E5%8A%A8%E8%A1%A8%E7%99%BD%E6%9C%BA/</url>
    <content><![CDATA[<p>​        可能宅家太久了，突然没什么学习欲望，就随便刷刷b站。偶然看到一个程序整蛊好友的视频，点进去一看，就是通过控制台的windows编程不断给好友对话窗口发消息”轰炸“。一直以为C语言这种底层语言，实现对微信QQ收发消息的操作应该挺复杂的，看过这个视频才知道通过”SendMessage()”函数操作窗口就可以实现了。</p>
<a id="more"></a>

<blockquote>
<p>原视频：<a href="https://www.bilibili.com/video/BV1gE411u77T?from=search&seid=1976803075258237591" target="_blank" rel="noopener">用C语言来爆破你的基友</a></p>
</blockquote>
<p>​        于是我立刻对windows编程产生了兴趣，毕竟如果自动操作微信QQ收发消息还是很酷的。但原视频的原理仅限于发送剪贴板的内容，可编辑性有限，所以我一开始的想法是做一个自动哄女友机，功能就是不断发送“多喝热水”，让对方心里感受到一股暖流。这个并不难实现，以下是核心代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HWND H;	<span class="comment">//句柄变量，用于确定要操作的窗口</span></span><br><span class="line"><span class="keyword">int</span> n;	<span class="comment">//发送次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">    SendMessage(H,WM_PASTE,<span class="number">0</span>,<span class="number">0</span>);	<span class="comment">//向H窗口执行粘贴命令（即发送剪贴板中提前复制的内容）</span></span><br><span class="line">    SendMessage(H,WM_KEYDOWN,VK_RETURN,<span class="number">0</span>);	<span class="comment">//模拟键盘按下回车，发送消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        不过这种方法有一定局限性：会影响用户操作，而且只能发送同样的内容，哄女友的效果欠佳。很明显，如果能向窗口直接传递字符串，就会有很大改善了。于是我干脆把自动哄女友机改进了一下，让它能随机从存储的字符串中发送消息，不再用剪贴板操作，于是“自动表白机”就诞生了：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100	<span class="comment">//指定发送窗口的名称</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StoredMessages 30	<span class="comment">//存储表白话的数量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxLength 100	<span class="comment">//一句表白话语最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HWND H;		<span class="comment">//句柄变量，类似于窗口的指针</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">char</span> name[N];</span><br><span class="line">    <span class="comment">//直接初始化一个存储表白话语的库，如果想简洁点可以考虑文件操作</span></span><br><span class="line">	<span class="keyword">char</span> str[StoredMessages][MaxLength]=&#123;</span><br><span class="line">		<span class="string">"I love you with all my heart."</span>,</span><br><span class="line">		<span class="string">"One life one love!"</span>,</span><br><span class="line">		<span class="string">"My heart belongs to you."</span>,</span><br><span class="line">		<span class="string">"When I close my eyes...all I see is you."</span>,</span><br><span class="line">		<span class="string">"I love you for you."</span>,</span><br><span class="line">		<span class="string">"Grow old along with me, the best is yet to be."</span>,</span><br><span class="line">		<span class="string">"You light up my life."</span>,</span><br><span class="line">		<span class="string">"You are my sweet-heart."</span>,</span><br><span class="line">		<span class="string">"You mean the world to me."</span>,</span><br><span class="line">		<span class="string">"You are my only love."</span>,</span><br><span class="line">		<span class="string">"When I am with you, I can tolerate all of you."</span>,</span><br><span class="line">		<span class="string">"Good hope to accompany you until old, let you be the treasure in my hand."</span>,</span><br><span class="line">		<span class="string">"I don't know how to love you. Looking at you is my only way."</span> ,</span><br><span class="line">		<span class="string">"It takes courage to love someone, because he needs to wait all his life."</span>,</span><br><span class="line">		<span class="string">"May my heart be embedded in your heart so that our love will never change."</span>,</span><br><span class="line">		<span class="string">"I would like to use gentleness to drive away the haze of this world for you."</span>,</span><br><span class="line">		<span class="string">"I would like to accompany you to watch the wind and listen to the rain, only hope you can love me."</span>,</span><br><span class="line">		<span class="string">"We are the two sides of a piece of paper. How can we separate them?"</span>,</span><br><span class="line">		<span class="string">"One day the world has only one love, that must be me to you."</span>,</span><br><span class="line">		<span class="string">"Pearl is the pain of shellfish's life, and you are the concern of my life."</span>,</span><br><span class="line">		<span class="string">"I'm a good cook. I'll cook for you next time."</span>,</span><br><span class="line">		<span class="string">"Take good care of yourself, I don't want to wait until the next life to love you again."</span>,</span><br><span class="line">		<span class="string">"Do you have a map? Because I just lost in your eyes."</span>,</span><br><span class="line">		<span class="string">"Can we never be apart? I am willing to protect you for life!"</span>,</span><br><span class="line">		<span class="string">"On the last day of my life, I wish I could leave first or with you."</span>,</span><br><span class="line">		<span class="string">"Add your heart to mine, and you will taste the bitterness."</span>,</span><br><span class="line">		<span class="string">"With your day, my life is more warm and happy."</span>,</span><br><span class="line">		<span class="string">"Only you know my emotions, and only you can bring them to me."</span>,</span><br><span class="line">		<span class="string">"You are my valuable world, I will never give you up."</span>,</span><br><span class="line">		<span class="string">"As long as you stay with me, other things don't matter anymore."</span></span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"输入指定窗口名称：\n"</span>);	<span class="comment">//name就是窗口的名字，比如和“朋友1”QQ聊天，聊天窗口名就是“朋友1”</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;name);</span><br><span class="line">	H=FindWindow(<span class="number">0</span>,name);	<span class="comment">//让H指向名字为name的窗口</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"输入发送次数：\n"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        </span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		i=rand()%StoredMessages;	<span class="comment">//用于实现随机发送的效果</span></span><br><span class="line">        <span class="comment">//对于随机的某句，逐字发送消息</span></span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;str[i][j]!=<span class="string">'\0'</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			SendMessage(H,WM_CHAR,WPARAM(str[i][j]),<span class="number">0</span>);	  <span class="comment">//发送一个字符，"WM_CHAR"指消息类型为字符</span></span><br><span class="line">		&#125; </span><br><span class="line">		SendMessage(H,WM_KEYDOWN,VK_RETURN,<span class="number">0</span>);	<span class="comment">//模拟键盘按下回车，发送整句话</span></span><br><span class="line">		Sleep(<span class="number">500</span>);	<span class="comment">//休眠半秒，实现一条条发送的效果</span></span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        以上方法使用FindWindow()函数确定窗口句柄，其实还有另外一种更方便的方式，可以直接通过鼠标所在的位置确定窗口，使用时直接将鼠标放在目标窗口上即可。核心代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HWND H;</span><br><span class="line">POINT mouse;	<span class="comment">//定义“点型”变量，类似于（x,y）二维坐标</span></span><br><span class="line"></span><br><span class="line">GetCursorPos(&amp;mouse);	<span class="comment">//获取鼠标位置</span></span><br><span class="line">H=WindowFromPoint(mouse);</span><br></pre></td></tr></table></figure>

<p>​        机智如我，这样就大功告成了。什么，你问为什么要逐字发送？因为直接传递字符串的方法有些复杂，我并没有搞明白。毕竟SendMessage()原本是用于传递操作命令的，传递字符串功能在其设定中并不关键（其实主要是我太菜了）。另外还有一个问题，因为WM_CHAR是无法识别中文字符的，所以只能用英语表白了……</p>
<p>​        但不管怎么说，基于这几行简单代码足以实现不少骚操作了，以下是操作流程图示。</p>
<hr>
<h4 id="Step-1-运行程序，打开要发送的聊天窗口"><a href="#Step-1-运行程序，打开要发送的聊天窗口" class="headerlink" title="Step 1. 运行程序，打开要发送的聊天窗口"></a>Step 1. 运行程序，打开要发送的聊天窗口</h4><p><img src="/2020/04/20/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%87%AA%E5%8A%A8%E8%A1%A8%E7%99%BD%E6%9C%BA/step1.jpg" alt="step 1"></p>
<h4 id="Step-2-输入窗口名称（即对方的备注名）和发送次数"><a href="#Step-2-输入窗口名称（即对方的备注名）和发送次数" class="headerlink" title="Step 2. 输入窗口名称（即对方的备注名）和发送次数"></a>Step 2. 输入窗口名称（即对方的备注名）和发送次数</h4><p><img src="/2020/04/20/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%87%AA%E5%8A%A8%E8%A1%A8%E7%99%BD%E6%9C%BA/step2.jpg" alt="step 1"></p>
<h4 id="Step-3-运行效果图"><a href="#Step-3-运行效果图" class="headerlink" title="Step 3. 运行效果图"></a>Step 3. 运行效果图</h4><p><img src="/2020/04/20/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%87%AA%E5%8A%A8%E8%A1%A8%E7%99%BD%E6%9C%BA/step3.jpg" alt="step 1"></p>
<hr>
<p>​        这种方法同样适用于微信聊天，但需要使用客户端版微信单独调出聊天界面（Web版需要一些其他手段）。需要注意的是，聊天窗口不能有子窗口，比如同时点开多人聊天，QQ会将这些人自动合并到一个窗口下，这时则需要单独拖出目标窗口。</p>
<p>​        以上就是关于自动表白机的全部内容，另外有一些没来得及实现的想法，比如通过在一个文档中复制内容，再粘贴到目标窗口，实现中文内容的发送；识别对方话语的内容，实现相应的自动回复；通过字符串拼接实现每句话中部分内容的替换等。这些内容以后有空就去尝试实践一下，眼下不多说，我这就去表白了(doge)</p>
]]></content>
      <tags>
        <tag>控制台小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>随想|取法乎上，仅得乎中</title>
    <url>/2020/04/23/%E9%9A%8F%E6%83%B31-%E5%8F%96%E6%B3%95%E4%B9%8E%E4%B8%8A%EF%BC%8C%E4%BB%85%E5%BE%97%E4%B9%8E%E4%B8%AD/</url>
    <content><![CDATA[<p>​        我也曾真正疯狂的学习过一次。不是中高考，不是大一上学期的期末考，而是就在前几周，平平常常的几天。那几天规律作息，按时上课，认真做笔记，作业当日完成从不拖沓，一天有效学习时间十个小时以上。毫不夸张的说，这是我18年来最最认真的一次学习。不过当我自信地认为这种状态能一直持续时，它很快就消散了，只存在了短短的六天。于是我日日夜夜试图恢复那种疯狂的状态，但一个月过去了，仍没能成功。</p>
<a id="more"></a>

<p>​        我也未尝没有反思，导致状态中断的直接原因是回坑Minecraft，根本原因仍不得而知，可能是由于目标没能提供足够动力，也有可能是执行的某个环节出现差错。然而直到今天，反思没有成果，我的情况却越来越糟糕了。早课常常不按时上，却给自己一个太困听课效果不好的理由；作业当天写不完，每次在ddl之前狂补，质量不堪入目；由于还要没完成的任务，所以心情焦躁，连锻炼时间也越来越少。慢慢地形成恶性循环，总是在补之前的内容，新的内容总是不能按时做，于是愈加烦躁，更不愿意花时间补救。更要命地是，拖欠的内容和焦躁的情绪令我睡眠越来越少，白天的精力也大幅衰减。</p>
<p>​        我理想的大学生活是，每天认真听课，和老师交流讨论；课下泡图书馆，一方面深入研究专业知识，一方面涉猎其他各个专业；闲暇时间出去游玩，开发自己的兴趣，和同学一起做一些技术。而眼看着当下我的生活与之背道而驰，我却仍一日复一日的浑浑噩噩。</p>
<p>​        前天计算机学院的宣讲听到了这句话，“取法乎上，仅得乎中。取法乎中，仅得乎下”，目标定得很高，达到的水平却可能一般般；目标定的一般，达到的水平可能只有下等。想一想真的很有道理，动力太容易随着时间而被消磨掉了，其中不可控的因素太多，比如这次是MC影响了我，下次可能就是B站。即便一开始目标定位很高，且有一定动力能够延续，最终也不过是仅得乎中。</p>
<p>​        然而，与其让目标给我初始动力让我能够延续，倒不如让动力成为一种得以保持的惯性。想想我认真学习的那些日子，尽管只有几天，但每天都格外充实，而且由于当天任务全部完成，第二天就动力十足，于是形成良性循环。我想，只要能避免一些决不能涉及的因素（比如回坑游戏，刷B站），这种惯性是可以保持的。我搭建这个博客的原因，正是因为我想给我的努力提供源动力，能够在做数分题、数据结构等作业时以分享为目的，提醒自己时刻高标准严要求，保持学习动力不中断。</p>
<p>​        我的大学有一个明显的基调——竞争。高考考进来就不容易，大一却还要专业分流，以及之后的保研考研出国，都会在学业各方面形成压力。刚进入大一时就为自己设下了几个大方向：考雅思，精通专业知识，阅读书本了解其他专业知识。现在却无一能做得好，甚至不敢触及这些内容，更别提在竞争中脱颖而出了。</p>
<p>​        今天恰好是世界读书日，我想也该做出改变了。<strong><em>从明天开始，卸载B站、游戏，认真对待自己的计划，每天早睡，按时上早课。本周要扫清所有拖欠内容，英语学习计划和数分复习计划即刻安排。为了最近的目标——考进计算机学院。</em></strong></p>
<p>​        之前能做到，现在也一定能，加油！</p>
]]></content>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>社科|中国共产党党员教育方式总结</title>
    <url>/2020/04/28/%E7%A4%BE%E7%A7%91-%E4%B8%AD%E5%9B%BD%E5%85%B1%E4%BA%A7%E5%85%9A%E5%85%9A%E5%91%98%E6%95%99%E8%82%B2%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>​        由于上周忘记交历史作业，老师说补作业只能付出一些代价，让我就中国共产党党员教育的方式、途径进行总结，且必须要有文献依据，最后根据这篇文章的质量裁定我是否能补交作业。于是，原本只有五道选择题的作业变成了一个课题。不过大一上学期陈导就教育我们，做一件事绝不能只看到这件事本身，还要想到对以后有什么帮助，达到“一做多得”的效果，本着这个原则，我还是认真的写了这一篇小论文，但由于今天还要补上周的数分课和数分作业，所以时间紧迫，本文章内容主要来源于其他文献的总结并进行概括，参考文献是交叉引用，恕不标明具体出处。</p>
<a id="more"></a>

<h1 id="中国共产党党员教育的方式总结"><a href="#中国共产党党员教育的方式总结" class="headerlink" title="中国共产党党员教育的方式总结"></a>中国共产党党员教育的方式总结</h1><p>​        中国共产党党员教育一直是党的建设的重要组成部分，是党的建设基础性经常性工作。对于提高党员队伍建设质量，激发党组织的生机活力，推动全面从严治党向纵深发展，夯实党长期执政基础，实现党伟大执政使命，具有十分重要的意义。下面从以时间为线索，简述历史不同时期的党员教育形式。其中自1941年延安整风运动至今，我们党相继开展了14次规模较大的党内集中教育活动，从暴风骤雨式的群众性政治运动到和风细雨式的党员教育活动，这种转变实际上反映的是中国共产党人在历经挫折之后对过去党员教育实践。因本文侧重总结中国共产党党员教育的方式和途径，将简略叙述相关事例的影响。</p>
<h3 id="一、新民主主义革命时期"><a href="#一、新民主主义革命时期" class="headerlink" title="一、新民主主义革命时期"></a>一、新民主主义革命时期</h3><h4 id="建党初期——通过党员政治学习、讨论和宣传进行政治启蒙"><a href="#建党初期——通过党员政治学习、讨论和宣传进行政治启蒙" class="headerlink" title="建党初期——通过党员政治学习、讨论和宣传进行政治启蒙"></a>建党初期——通过党员政治学习、讨论和宣传进行政治启蒙</h4><p>​        1923 年 11 月的《教育宣传问题决议案》强调了党内教育情况的报告制度，这一制度要求各地党组织定期开展“政治讨论”，讨论过后，依据事实求是的精神，根据学习讨论的现实情况，向中央提交讨论报告。</p>
<h4 id="转向规范——集体教育管理"><a href="#转向规范——集体教育管理" class="headerlink" title="转向规范——集体教育管理"></a>转向规范——集体教育管理</h4><p>​        随着中共共产党工作重心逐渐转向农村，毛泽东等党内领导同志提出思想建党。《井冈山的斗争》是毛泽东作于 1928 年 11 月，在这篇文章中他提到，在面对众多非无产阶级成分出身的农民党员来说，无产阶级思想的领导就显得尤为重要，必须加强党的思想建设。1935年遵义会议之后，党的教育开始走向相对规范的状态。1939 年 2 月 17 日中共中央书记处发出《中央关于成立干部教育部的通知》，对在职党员和干部进行教育，教育方式为脱产式，将党员干部集中到校进行集体教育和管理。</p>
<h4 id="延安整风运动——通过精读文件"><a href="#延安整风运动——通过精读文件" class="headerlink" title="延安整风运动——通过精读文件"></a>延安整风运动——通过精读文件</h4><p>​        1941 年 5 月，毛泽东发表《改造我们的学习》，开启中国共产党第一次大规模整风运动。对象为全体在职党员，运动的方法是精读文件，学习中共中央指定的二十二个整风文件，提高政治思想觉悟，进行自我批评。</p>
<h3 id="二、社会主义革命建设时期"><a href="#二、社会主义革命建设时期" class="headerlink" title="二、社会主义革命建设时期"></a>二、社会主义革命建设时期</h3><h4 id="建国初期整风运动——通过集体分文化程度学习"><a href="#建国初期整风运动——通过集体分文化程度学习" class="headerlink" title="建国初期整风运动——通过集体分文化程度学习"></a>建国初期整风运动——通过集体分文化程度学习</h4><p>​        1951年 2 月，中共中央召开政治局扩大会议，决定用三年的时间，对基层的党组织进行一次大范围地整顿，这一次整党运动则是解决党的基层组织，尤其是针对一些有着官僚主义和命令主义的党员，对他们进行思想政治教育。同年发布《关于加强理论教育的决定（草案）》，对党员的文化程度进行划分，不同层次分别学习中华人民共和国和中国共产党的常识；社会发展史的常识；马、恩、列、斯和毛泽东的理论著作。，1951 年 至 1953 年，中共中央相继出版了《毛泽东选集》三卷，学习人数空前之高。</p>
<h4 id="1957年整风运动——通过集体研究文件"><a href="#1957年整风运动——通过集体研究文件" class="headerlink" title="1957年整风运动——通过集体研究文件"></a>1957年整风运动——通过集体研究文件</h4><p>​        1957 年开展一次整风运动。这次整风运动的内容是整顿党的主观主义，宗派主义和官僚主义；整风方法，像延安那样，研究文件，批评错误。正确处理人民内部矛盾成为这次整风运动的主题。最终整风运动不幸因反右势力扩大化而结束。</p>
<h3 id="三、改革开放新的历史时期"><a href="#三、改革开放新的历史时期" class="headerlink" title="三、改革开放新的历史时期"></a>三、改革开放新的历史时期</h3><h4 id="1983年整党——强调批评与自我批评"><a href="#1983年整党——强调批评与自我批评" class="headerlink" title="1983年整党——强调批评与自我批评"></a>1983年整党——强调批评与自我批评</h4><p>​        1983 年 10 月，中共十二届二中全会通过《中共中央关于整党的决定》。决定指出，我们这次整党的目的就是运用批评与自我批评的方式，解决党内存在的思想、组织、作风等不良风气，提高全体党员的思想水平和工作水平，密切与人们群众的联系，使我们党成为社会主义现代化建设事业的领导核心。</p>
<h4 id="“三讲”教育活动——分批进行自我批判的交流"><a href="#“三讲”教育活动——分批进行自我批判的交流" class="headerlink" title="“三讲”教育活动——分批进行自我批判的交流"></a>“三讲”教育活动——分批进行自我批判的交流</h4><p>​        随着社会主义市场经济的深入发展，一些领导干部党性不强、缺乏正气、反腐倡廉的任务也显得格外艰巨。为此，1998 年 11 月 21 日，中共中央发出了《关于在县级以上党政领导班子、领导干部中深入开展以“讲学习、讲政治、讲正气”为主要内容的党性党风教育的意见》，在全党开展“三讲”教育。采取的是自上而下，分级分批的办法进行。基本的步骤为思想发动、学习提高，自我剖析、听取意见，交流思想、开展批评，认真整改、巩固成果四个阶段。</p>
<h4 id="“三个代表”重要思想学习活动——多项举措并进"><a href="#“三个代表”重要思想学习活动——多项举措并进" class="headerlink" title="“三个代表”重要思想学习活动——多项举措并进"></a>“三个代表”重要思想学习活动——多项举措并进</h4><p>​        进入新世纪以来，世界政治格局呈现多极化、经济全球化的迅速发展和信息网络化深刻变革。为了适应国情所发生的重大变化，江泽民同志提出了“三个代表”重要思想，指导中国共产党在新的世纪中走在时代前列，并引领这个时代前进。工作方式多项举措并进，如广泛开展会谈，谈心工作，一定时间内召开专题形式的会议，党员之间交流经验和意见，以小组形式进行评议，针对出现的问题，开展广泛地批评与自我批评。并依据具体情况制定好整改措施，突出整改重点，落实整改责任，按照党章要求严格进行。</p>
<h4 id="党的群众路线教育实践活动"><a href="#党的群众路线教育实践活动" class="headerlink" title="党的群众路线教育实践活动"></a>党的群众路线教育实践活动</h4><p>​        党的十八大后，中国进入了全面建成小康社会的关键阶段。为做好新形势下党的群众工作，使全面深化改革的艰巨任务得到人民群众强有力的支持，2013 年 4 月，中央按照十八大的部署与要求，决定从 2013 年下半年开始，用一年左右时间，在全党自上而下分批开展党的群众路线教育实践活动。中央针对党内一些成员理想信念不坚定，贪图名利，不负责任，贪图奢靡享乐，甚至出现腐化堕落等问题。</p>
<p>​        纵观从中国共产党创立至今，党员教育始终是最重要的工作任务之一。在未理清这些内容之前，我从未感觉中央红头文件下，那些繁琐的书面词汇有何不同，现在才察觉在历史不同时期的关键节点下，中国共产党总能够明察当前的形式和工作重点，在学习文件中明示当前的工作重心、整改的主要对象、具体的落实方法，从各个环节确保中国共产党党员思想的先进性。党员最开始的学习方式是自行政治交流，其次转为规范的集体党校学习，大规模文件学习，由于中国共产党一党执政的特点，且随着中国共产党的规模不断扩大，“分级分批次落实”，“自我批评”成为了党员学习的关键词，敢于正视自己的问题，不断自我批判吸收，更新迭代，从上自下落实到位，才能成就一个九千万人的大党。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><strong>参考文献</strong></h3><blockquote>
<p>[1]中共中央办公厅.《中国共产党党员教育管理工作条例》.中共中央办公厅.2019.05.</p>
</blockquote>
<blockquote>
<p>[2]叶菲.中国共产党党员教育的历史经验与现代创新.中共辽宁省委党校.2014.05</p>
</blockquote>
<blockquote>
<p>[3]何光. 中国共产党集中教育活动历史进程与基本经验研究.华中师范大学马克思主义学院.2016.06.</p>
</blockquote>
]]></content>
      <tags>
        <tag>社科</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构1|栈-表达式计算</title>
    <url>/2020/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841-%E6%A0%88-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h2 id="题目（难度：3）"><a href="#题目（难度：3）" class="headerlink" title="题目（难度：3）"></a>题目（难度：3）</h2><h4 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h4><p>从标准输入中读入一个整数算术运算表达式，如24 / ( 1 + 5%3 + 36 / 6 / 2 - 2) * ( 12 / 2 / 2 )= ，计算表达式结果，并输出。</p>
<a id="more"></a>

<p>要求：</p>
<p>1、表达式运算符只有+、-、*、/、%，表达式末尾的=字符表示表达式输入结束，表达式中可能会出现空格；</p>
<p>2、表达式中会出现圆括号，括号可能嵌套，不会出现错误的表达式；</p>
<p>3、出现除号/时，以整数相除进行运算，结果仍为整数，例如：5/3结果应为1。</p>
<p>4、要求采用逆波兰表达式来实现表达式计算。</p>
<h4 id="【输入形式】"><a href="#【输入形式】" class="headerlink" title="【输入形式】"></a>【输入形式】</h4><p>从键盘输入一个以=结尾的整数算术运算表达式。操作符和操作数之间可以有空格分隔。</p>
<h4 id="【输出形式】"><a href="#【输出形式】" class="headerlink" title="【输出形式】"></a>【输出形式】</h4><p>在屏幕上输出计算结果（为整数，即在计算过程中除法为整除）。</p>
<h4 id="【样例输入】"><a href="#【样例输入】" class="headerlink" title="【样例输入】"></a>【样例输入】</h4><p>24 / ( 1 + 5%3 + 36 / 6 / 2 - 2) * ( 12 / 2 / 2 )   =</p>
<h4 id="【样例输出】"><a href="#【样例输出】" class="headerlink" title="【样例输出】"></a>【样例输出】</h4><p>18</p>
<h4 id="【样例说明】"><a href="#【样例说明】" class="headerlink" title="【样例说明】"></a>【样例说明】</h4><p>按照运算符及括号优先级依次计算表达式的值。</p>
<h2 id="第一次题解"><a href="#第一次题解" class="headerlink" title="第一次题解"></a>第一次题解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OP 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data[N];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;<span class="built_in">stack</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[N];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;nstack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  //后缀表达式</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> b;    <span class="comment">//1为数字，2为操作符</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">    &#125;u;</span><br><span class="line">&#125;Expression;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eatspace</span><span class="params">(<span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Priority</span><span class="params">(<span class="keyword">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Top</span><span class="params">(<span class="built_in">stack</span>*)</span></span>;   <span class="comment">//操作符栈顶</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Pop</span><span class="params">(<span class="built_in">stack</span>*)</span></span>;   <span class="comment">//操作符弹出</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nTop</span><span class="params">(nstack*)</span></span>;  <span class="comment">//数字栈顶</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nPop</span><span class="params">(nstack*)</span></span>;  <span class="comment">//数组栈弹出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="built_in">stack</span>*,<span class="keyword">char</span>)</span></span>;     <span class="comment">//入操作符栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nPush</span><span class="params">(nstack*,<span class="keyword">int</span>)</span></span>;    <span class="comment">//入数字栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cal</span><span class="params">(nstack*,<span class="keyword">const</span> <span class="keyword">char</span>)</span></span>;     <span class="comment">//数字栈计算</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(<span class="built_in">stack</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>,sum=<span class="number">0</span>;    <span class="comment">//cnt为后缀表达式游标</span></span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> str[N];</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    Expression out[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>* st=(<span class="built_in">stack</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">stack</span>));</span><br><span class="line">    nstack* nst=(nstack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(nstack));</span><br><span class="line">    st-&gt;top=<span class="number">-1</span>;</span><br><span class="line">    nst-&gt;top=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    gets(str);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*中缀转后缀*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;str[i]!=<span class="string">'\0'</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*1.读入数字*/</span></span><br><span class="line">        <span class="comment">//计算多位数字</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(str[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            sum=sum*<span class="number">10</span>+str[i]-<span class="string">'0'</span>;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isspace</span>(str[i]))</span><br><span class="line">        	<span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">//(此时读取的一定是操作符）结算之前的数字进入后缀表达式</span></span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            out[cnt].b=NUM;</span><br><span class="line">            out[cnt++].u.num=sum;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'='</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*2.读入操作符*/</span></span><br><span class="line">        <span class="comment">//操作符栈空直接入栈</span></span><br><span class="line">        <span class="keyword">if</span>(IsEmpty(st))</span><br><span class="line">        &#123;</span><br><span class="line">            Push(st,str[i]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//操作符栈不空，栈顶元素优先级大于等于读取字符，将栈顶操作符放入后缀表达式并弹出,是）则弹出（之后的内容</span></span><br><span class="line">		<span class="keyword">if</span>(str[i]==<span class="string">')'</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(Top(st)!=<span class="string">'('</span>)</span><br><span class="line">	        &#123;</span><br><span class="line">	            out[cnt].b=OP;</span><br><span class="line">	            out[cnt++].u.ch=Top(st);</span><br><span class="line">	            Pop(st);</span><br><span class="line">	        &#125;</span><br><span class="line">	        Pop(st);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(!IsEmpty(st)&amp;&amp;(Top(st)!=<span class="string">'('</span>)&amp;&amp;Priority(str[i])&lt;=Priority(Top(st)))</span><br><span class="line">	        &#123;</span><br><span class="line">	            out[cnt].b=OP;</span><br><span class="line">	            out[cnt++].u.ch=Top(st);</span><br><span class="line">	            Pop(st);</span><br><span class="line">	        &#125;</span><br><span class="line">	        <span class="comment">//弹出优先级大的操作符后，压入当前读取操作符</span></span><br><span class="line">	        Push(st,str[i]);</span><br><span class="line">		&#125; </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//依次弹出剩余操作符</span></span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(st))</span><br><span class="line">    &#123;</span><br><span class="line">        out[cnt].b=OP;</span><br><span class="line">        out[cnt++].u.ch=Top(st);</span><br><span class="line">        Pop(st);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*计算并输出后缀表达式*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//是数则压入数字栈，否则是操作符则对应计算</span></span><br><span class="line">        <span class="keyword">if</span>(out[i].b==NUM)</span><br><span class="line">        &#123;</span><br><span class="line">            nPush(nst,out[i].u.num);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">			Cal(nst,out[i].u.ch);</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,nTop(nst));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Priority</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">'('</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'/'</span>||ch==<span class="string">'*'</span>||ch==<span class="string">'%'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'+'</span>||ch==<span class="string">'-'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>  <span class="title">Pop</span><span class="params">(<span class="built_in">stack</span>* st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> st-&gt;data[st-&gt;top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Top</span><span class="params">(<span class="built_in">stack</span>* st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> st-&gt;data[st-&gt;top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nPop</span><span class="params">(nstack* nst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nst-&gt;data[nst-&gt;top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nTop</span><span class="params">(nstack* nst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nst-&gt;data[nst-&gt;top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="built_in">stack</span>* st,<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st-&gt;data[++st-&gt;top]=ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nPush</span><span class="params">(nstack* nst,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nst-&gt;data[++nst-&gt;top]=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(<span class="built_in">stack</span>* st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st-&gt;top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cal</span><span class="params">(nstack* nst,<span class="keyword">const</span> <span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(ch)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'+'</span>:nst-&gt;data[nst-&gt;top<span class="number">-1</span>]+=nTop(nst);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'-'</span>:nst-&gt;data[nst-&gt;top<span class="number">-1</span>]-=nTop(nst);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>:nst-&gt;data[nst-&gt;top<span class="number">-1</span>]*=nTop(nst);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>:nst-&gt;data[nst-&gt;top<span class="number">-1</span>]/=nTop(nst);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'%'</span>:nst-&gt;data[nst-&gt;top<span class="number">-1</span>]%=nTop(nst);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Unkownable ch %c!\n"</span>,ch);</span><br><span class="line">    &#125;</span><br><span class="line">    nPop(nst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="优秀题解"><a href="#优秀题解" class="headerlink" title="优秀题解"></a>优秀题解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">暂无</span><br></pre></td></tr></table></figure>



<h2 id="反思总结"><a href="#反思总结" class="headerlink" title="反思总结"></a>反思总结</h2><ul>
<li><p>遍历一行含空格字符串时，不用特地设计eatspace()函数，可以在括号中用if(str[i]==’ ‘)continue;解决。</p>
</li>
<li><p>本题用三个栈实现操作，其实可以合并数字栈和后缀表达式栈。</p>
</li>
<li><p>运行时出错的一种可能：非法访问指针，在循环数组时指针循环到NULL，如下，弹出栈中优先级高的元素直到’(‘与空栈为止，在一开始忘记加入(Top(st))!=’(‘语句，导致前一段代码访问到NULL。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(!IsEmpty(st)&amp;&amp;(Top(st)!=<span class="string">'('</span>)&amp;&amp;Priority(str[i])&lt;=Priority(Top(st)))</span><br><span class="line">&#123;</span><br><span class="line">    out[cnt].b=OP;</span><br><span class="line">    out[cnt++].u.ch=Top(st);</span><br><span class="line">    Pop(st);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构2|栈-基本操作</title>
    <url>/2020/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842-%E6%A0%88-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="题目-（难度：1）"><a href="#题目-（难度：1）" class="headerlink" title="题目 （难度：1）"></a>题目 （难度：1）</h2><h4 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h4><p>假设给定的整数栈初始状态为空，栈的最大容量为100。从标准输入中输入一组栈操作，按操作顺序输出出栈元素序列。栈操作：1表示入栈操作，后跟一个整数（不为1、0和-1）为入栈元素；0表示出栈操作；-1表示操作结束。</p>
<a id="more"></a>

<h4 id="【输入形式】"><a href="#【输入形式】" class="headerlink" title="【输入形式】"></a>【输入形式】</h4><p>从标准输入读取一组栈操作，入栈的整数和表示栈操作的整数之间都以一个空格分隔。</p>
<h4 id="【输出形式】"><a href="#【输出形式】" class="headerlink" title="【输出形式】"></a>【输出形式】</h4><p>在一行上按照操作的顺序输出出栈元素序列，以一个空格分隔各元素，最后一个元素后也要有一个空格。如果栈状态为空时进行出栈操作，或栈满时进行入栈操作，则输出字符串“error”，并且字符串后也要有一空格。所有操作都执行完后，栈也有可能不为空。</p>
<h4 id="【样例输入】"><a href="#【样例输入】" class="headerlink" title="【样例输入】"></a>【样例输入】</h4><p>1 3 1 5 1 7 0 0 1 8 0 1 12 1 13 0 0 0 0 1 90 1 89 0 -1</p>
<h4 id="【样例输出】"><a href="#【样例输出】" class="headerlink" title="【样例输出】"></a>【样例输出】</h4><p>7 5 8 13 12 3 error 89  </p>
<h4 id="【样例说明】"><a href="#【样例说明】" class="headerlink" title="【样例说明】"></a>【样例说明】</h4><p>入栈元素依次为3、5、7，然后有两次出栈动作，所以先输出7和5，这时栈中只有元素3；之后元素8入栈，又出栈，输出8；随后元素12和13入栈，再进行4次出栈操作，输出13、12和3，这时栈为空，再进行出栈操作会输出error；最后90和89入栈，进行一次出栈操作，输出89，栈中剩余1个元素。</p>
<h2 id="第一次题解"><a href="#第一次题解" class="headerlink" title="第一次题解"></a>第一次题解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DONE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span>* <span class="title">Stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> capacity;</span><br><span class="line">	<span class="keyword">int</span> top;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">array</span>[N];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;top==<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;top==S-&gt;capacity<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack S,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(IsFull(S))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"error "</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	S-&gt;<span class="built_in">array</span>[++S-&gt;top]=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"error "</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>,S-&gt;<span class="built_in">array</span>[S-&gt;top--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> guide=DONE;</span><br><span class="line">	<span class="keyword">int</span> c;</span><br><span class="line">	Stack S=(Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct StackRecord));</span><br><span class="line">	S-&gt;capacity=<span class="number">100</span>;</span><br><span class="line">	S-&gt;top=<span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(guide==DONE)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">switch</span>(c)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">					&#123;</span><br><span class="line">						guide=NUM;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">					&#123;</span><br><span class="line">						Pop(S);</span><br><span class="line">						guide=DONE;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">default</span>:</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">"读入未知栈操作符（非0,1,-1）"</span>) ;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(guide==NUM)</span><br><span class="line">		&#123;</span><br><span class="line">			Push(S,c);</span><br><span class="line">			guide=DONE;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="优秀题解"><a href="#优秀题解" class="headerlink" title="优秀题解"></a>优秀题解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">暂无</span><br></pre></td></tr></table></figure>



<h2 id="反思总结"><a href="#反思总结" class="headerlink" title="反思总结"></a>反思总结</h2><ul>
<li>对于连续读入“操作符 操作的内容”的格式，可以考虑设置一guide变量（值在0,1中变化，应用于判定当前读入字符应执行什么操作）先gets()整体，然后逐个字符遍历，是OP则根据操作类型，给guide附不同值，以便指导下一步的数应执行什么操作。</li>
</ul>
]]></content>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构3|栈-文本编辑操作模拟（简）</title>
    <url>/2020/04/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%843-%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E6%93%8D%E4%BD%9C%E6%A8%A1%E6%8B%9F%EF%BC%88%E7%AE%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="题目-（难度：2）"><a href="#题目-（难度：2）" class="headerlink" title="题目 （难度：2）"></a>题目 （难度：2）</h2><h4 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h4><p>编写一程序模拟文本编辑操作。首先从标准输入读取一行字符串（字符个数不超过512），该行字符串是已经过n（大于0，小于等于10）步编辑操作后的结果。然后从下一行读取n，以及已发生过的n步编辑操作，编辑操作分行输入，输入格式为：</p>
<p>op pos str</p>
<p>其中op为编辑操作命令编码（在此只有插入和删除操作，1表示插入或2表示删除操作）；pos表示插入或删除的位置；str表示已经插入或删除的字符串（中间没有空格）。各数据间以一个空格分隔。</p>
<p>然后在空一行后，再分行输入当前将要进行的编辑操作，包括如下四种操作（操作编码分别为：1表示插入，2表示删除操作，3表示撤销（即undo操作），-1表示结束）：</p>
<a id="more"></a>

<p>1 pos str</p>
<p>表示将在pos位置插入字符串str（中间没有空格），各数据间以一个空格分隔；</p>
<p>2 pos n</p>
<p>表示将从pos位置开始删除n个字符（各数据间以一个空格分隔），若要删除的字符个数多于已有字符个数（即在文本中从pos开始的字符个数小于n），则按实际字符数删除即可。（提示：为了能够撤销删除操作，应按“2 pos str”形式保存命令。）</p>
<p>3</p>
<p>表示撤销最近执行的插入或删除操作，可以进行多次撤销操作，注意：也可以撤销之前已经发生过的n步编辑操作中的操作。</p>
<p>-1</p>
<p>表示退出编辑操作，在屏幕上输出最终编辑后的文本。</p>
<p>要求：</p>
<p>1、上述所有输入的编辑操作中的字符串str都不包含空白字符（空格符、制表符或换行符）；</p>
<p>2、插入操作中的位置pos大于等于0，并且小于等于当前文本的字符个数；0位置表示文本第一个字符的位置；若pos为当前文本的字符个数，则表示在文本最后插入字符串；</p>
<p>3、删除操作中的位置pos大于等于0，并且小于当前文字的字符个数；</p>
<p>4、若已无操作可撤销，则再进行撤销操作无效；</p>
<p>5、文本在编辑过程中，总字符个数不会超过512。</p>
<h4 id="【输入形式】"><a href="#【输入形式】" class="headerlink" title="【输入形式】"></a>【输入形式】</h4><p>先从键盘输入一行字符串，表示已经经过n步编辑操作后的文本串，然后在下一行输入一个正整数n，并分行输入n步插入或删除操作（表示按时间先后顺序已进行的操作），格式如上所述。随后空一行，再分行输入将要进行的编辑操作，格式如上所述。直到输入-1操作为止。</p>
<h4 id="【输出形式】"><a href="#【输出形式】" class="headerlink" title="【输出形式】"></a>【输出形式】</h4><p>在屏幕上输出最终编辑后的文本内容。</p>
<h4 id="【样例输入】"><a href="#【样例输入】" class="headerlink" title="【样例输入】"></a>【样例输入】</h4><p>A Stack is a container of objects that are inserted and removed according to the last-in first-out (LIFO) principle.???</p>
<p>4</p>
<p>1 20 ainer</p>
<p>2 0 ???</p>
<p>1 85 -</p>
<p>1 99 (LIFO)</p>
<p>3</p>
<p>2 110 10</p>
<p>1 110 Objects</p>
<p>2 98 1</p>
<p>2 0 1</p>
<p>2 108 10</p>
<p>3</p>
<p>3</p>
<p>3</p>
<p>-1</p>
<h4 id="【样例输出】"><a href="#【样例输出】" class="headerlink" title="【样例输出】"></a>【样例输出】</h4><p>A Stack is a container of objects that are inserted and removed according to the last-in first-out principle.Objects</p>
<h4 id="【样例说明】"><a href="#【样例说明】" class="headerlink" title="【样例说明】"></a>【样例说明】</h4><p>第一行输入的文本串是先后经过下面4次编辑操作后得到的：先在20位置插入了字符串ainer，然后删除了开始位置的字符串???，随后在85位置插入了一个字符-，最后在99位置插入了字符串(LIFO)。</p>
<p>随后输入了撤销操作，即撤销先前最后进行的“1 99 (LIFO)”操作，也就是将99位置的6个字符删除；</p>
<p>2 110 10：将文本串最后的字符串???删除；</p>
<p>1 110 Objects：在文本串末尾插入字符串Objects；</p>
<p>随后执行了三次删除操作，又执行了三次撤销操作，最后输入的-1表示编辑操作结束，在屏幕上输出最终编辑后的文本串。</p>
<h2 id="第一次题解"><a href="#第一次题解" class="headerlink" title="第一次题解"></a>第一次题解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INSR 1	<span class="comment">//宏定义当前操作状态</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEL 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNDO 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> END -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 600</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxOP 512</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span>* <span class="title">Stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> op[MaxOP];</span><br><span class="line">	<span class="keyword">int</span> pos[MaxOP];</span><br><span class="line">	<span class="keyword">int</span> top;</span><br><span class="line">	<span class="keyword">char</span> edits[MaxOP][MaxSize];</span><br><span class="line">&#125;;</span><br><span class="line">Stack st;</span><br><span class="line"><span class="keyword">char</span> str[MaxSize];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">int</span> curop,curpos;</span><br><span class="line">	<span class="keyword">int</span> delnum;</span><br><span class="line">	<span class="keyword">char</span> curedits[MaxSize];</span><br><span class="line">	</span><br><span class="line">	st=(Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct StackRecord));</span><br><span class="line">	st-&gt;top=<span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	gets(str);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//读入前n个操作并压栈</span></span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %s"</span>,&amp;curop,&amp;curpos,curedits);</span><br><span class="line">		Push(curop,curpos,curedits);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;curop)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">switch</span>(curop)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> END:</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">goto</span> <span class="built_in">end</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">case</span> INSR:</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">"%d%s"</span>,&amp;curpos,&amp;curedits);</span><br><span class="line">					Push(curop,curpos,curedits);</span><br><span class="line">					Insert(curpos,curedits);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">case</span> DEL:</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;curpos,&amp;delnum);</span><br><span class="line">					<span class="keyword">for</span>(i=curpos,j=<span class="number">0</span>;i&lt;curpos+delnum&amp;&amp;str[i]!=<span class="string">'\0'</span>;i++,j++) <span class="comment">//获取被删除的子</span></span><br><span class="line">						curedits[j]=str[i];									<span class="comment">//字符串</span></span><br><span class="line">					curedits[j]=<span class="string">'\0'</span>;</span><br><span class="line">					Push(curop,curpos,curedits);</span><br><span class="line">					Delete(curpos,delnum);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">case</span> UNDO:</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(st-&gt;top==<span class="number">-1</span>)</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span>(st-&gt;op[st-&gt;top]==INSR)</span><br><span class="line">						Delete(st-&gt;pos[st-&gt;top],<span class="built_in">strlen</span>(st-&gt;edits[st-&gt;top]));</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span>(st-&gt;op[st-&gt;top]==DEL)</span><br><span class="line">						Insert(st-&gt;pos[st-&gt;top],st-&gt;edits[st-&gt;top]);</span><br><span class="line">                    </span><br><span class="line">					Pop();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"unknown op!"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">end</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> curop,<span class="keyword">int</span> curpos,<span class="keyword">char</span>* curedits)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	st-&gt;top++;</span><br><span class="line">	st-&gt;op[st-&gt;top]=curop;</span><br><span class="line">	st-&gt;pos[st-&gt;top]=curpos;</span><br><span class="line">	<span class="built_in">strcpy</span>(st-&gt;edits[st-&gt;top],curedits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	st-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> curpos,<span class="keyword">char</span>* curedits)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> temp[MaxSize];</span><br><span class="line">	<span class="built_in">strcpy</span>(temp,str+curpos);</span><br><span class="line">	str[curpos]=<span class="string">'\0'</span>;</span><br><span class="line">	<span class="built_in">strcat</span>(str,curedits);</span><br><span class="line">	<span class="built_in">strcat</span>(str,temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> curpos,<span class="keyword">int</span> delnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> temp[MaxSize];</span><br><span class="line">	<span class="keyword">if</span>(curpos+delnum&lt;<span class="built_in">strlen</span>(str))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(temp,str+curpos+delnum);</span><br><span class="line">		<span class="built_in">strcpy</span>(str+curpos,<span class="string">""</span>);</span><br><span class="line">		<span class="built_in">strcat</span>(str,temp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">strcpy</span>(str+curpos,<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="优秀题解"><a href="#优秀题解" class="headerlink" title="优秀题解"></a>优秀题解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">暂无</span><br></pre></td></tr></table></figure>



<h2 id="反思总结"><a href="#反思总结" class="headerlink" title="反思总结"></a>反思总结</h2><ul>
<li><p>fgets()读取字符串时，会读入’\n’，gets()则不会。这也意味着gets()后接输入需要特别注意’\n’的问题，如getchar()，scanf(“%c”)等，但scanf(“%d”)则无需注意。</p>
</li>
<li><p>strcat()复制到字符串尾部，不要加上游标。</p>
</li>
<li><p>本题是字符串剪接和栈的综合，写完第一遍代码debug时发现并没有在栈上出bug，而是出在了字符串剪接上。这里可以总结出字符串中插入子串和删除一定长度字符的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一定要分清strcpy()和strcat(),可能会手误打错；另外注意strcat是直接接到尾部，不要加相对游标</span></span><br><span class="line"><span class="comment">//在str的pos位置插入子串substr	注：pos指从0开始的游标，若从实际字符串从1开始计数，则需调整</span></span><br><span class="line"><span class="comment">//即：拿下后面的，str置\0，接上目标串，再接上temp串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span>* str,<span class="keyword">int</span> pos,<span class="keyword">char</span>* substr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> temp[MaxSize];</span><br><span class="line">	<span class="built_in">strcpy</span>(temp,str+pos);</span><br><span class="line">	str[pos]=<span class="string">'\0'</span>;</span><br><span class="line">	<span class="built_in">strcat</span>(str,substr);</span><br><span class="line">	<span class="built_in">strcat</span>(str,temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在str的pos位置起，删除n个字符（pos位置的调整同上）</span></span><br><span class="line"><span class="comment">//即：拿下后面的，str置\0，接到str上</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> temp[MaxSize];</span><br><span class="line">	<span class="keyword">if</span>(pos+n&lt;<span class="built_in">strlen</span>(str))	<span class="comment">//判断要删除的字符个数n是否超过字符串长度</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(temp,str+pos+n);</span><br><span class="line">		<span class="built_in">strcpy</span>(str+pos,<span class="string">""</span>);</span><br><span class="line">		<span class="built_in">strcat</span>(str,temp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">strcpy</span>(str+pos,<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>栈</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构5|栈-C程序括号匹配检查</title>
    <url>/2020/04/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%845-%E6%A0%88-C%E7%A8%8B%E5%BA%8F%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="题目（难度：4）"><a href="#题目（难度：4）" class="headerlink" title="题目（难度：4）"></a>题目（难度：4）</h2><h4 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h4><p>编写一程序检查C源程序文件中{}、()等括号是否匹配,并输出第一个检测到的不匹配的括号及所对应括号所在的行号（程序中只有一个括号不匹配）。</p>
<a id="more"></a>

<p>注意：</p>
<p>1.除了括号可能不匹配外，输入的C源程序无其它语法错误。</p>
<p>2.字符常量、字符串常量及注释中括号不应被处理，注释包括单行注释//和多行/* */注释</p>
<p>3.字符常量和字符串常量中不包含转义字符&#39;和&quot;；</p>
<p>4.程序中出现有意义括号的个数不超过200个；</p>
<p>不匹配判断规则：</p>
<p>1.当检测的程序括号为’{‘时，若其前序尚未匹配的括号为’(‘时，输出该’(‘左括号及所在行号； </p>
<p>2.当遇到一个不匹配的右括号’)’或’}’时，输出该右括号及所在行号；</p>
<p>3.当程序处理完毕时，还存在不匹配的左括号时，输出该左括号及所在行号。</p>
<h4 id="【输入形式】"><a href="#【输入形式】" class="headerlink" title="【输入形式】"></a>【输入形式】</h4><p>打开当前目录下文件example.c，查询其括号是否匹配。该文件中每行字符数不超过200。</p>
<h4 id="【输出形式】"><a href="#【输出形式】" class="headerlink" title="【输出形式】"></a>【输出形式】</h4><p>若存在括号不匹配时，应输出首先能判断出现不匹配的括号及其所在的行号。当出现括号不匹配时，按下面要求输出相关信息：</p>
<p>without maching ‘x’ at line ‘n’</p>
<p>其中’x’为‘{’, ‘}’， ‘(’, ‘)’等符号，’n’为该符号所在的行号。</p>
<p>若整个程序括号匹配，则按下面所示顺序输出括号匹配情况，中间没有空格。</p>
<p>(){(()){}}</p>
<h4 id="【样例输入1】"><a href="#【样例输入1】" class="headerlink" title="【样例输入1】"></a>【样例输入1】</h4><p>若当前目录下输入文件example.c中内容如下：</p>
<p>#include&lt;stdio.h&gt;</p>
<p>int main(){</p>
<p>printf(“{ hello world }\n”); // }</p>
<p>)</p>
<h4 id="【样例输出1】"><a href="#【样例输出1】" class="headerlink" title="【样例输出1】"></a>【样例输出1】</h4><p>without maching ‘)’ at line 4</p>
<h4 id="【样例输入2】"><a href="#【样例输入2】" class="headerlink" title="【样例输入2】"></a>【样例输入2】</h4><p>若当前目录下输入文件example.c中内容如下：</p>
<p>#include&lt;stdio.h&gt;</p>
<p>int main(){</p>
<p>printf(“{ hello world }d\n”); /* }*/</p>
<h4 id="【样例输出2】"><a href="#【样例输出2】" class="headerlink" title="【样例输出2】"></a>【样例输出2】</h4><p>without maching ‘{‘ at line 2</p>
<h4 id="【样例输入3】"><a href="#【样例输入3】" class="headerlink" title="【样例输入3】"></a>【样例输入3】</h4><p>若当前目录下输入文件example.c中内容如下：</p>
<p>#include&lt;stdio.h&gt;</p>
<p>int main(){</p>
<p>printf(“{ hello world }d\n”); /* }*/</p>
<p>}</p>
<h4 id="【样例输出3】"><a href="#【样例输出3】" class="headerlink" title="【样例输出3】"></a>【样例输出3】</h4><p>(){()}</p>
<h4 id="【样例说明】"><a href="#【样例说明】" class="headerlink" title="【样例说明】"></a>【样例说明】</h4><p>样例1：在注释部分和字符串中的括号不考虑，在将程序处理之后得到的括号序列是（）{（）），遇到右括号时与最近的左括号匹配，发现最后一个小括号和大括号不匹配。</p>
<p>样例2：处理之后的括号序列是（）{（），在最后缺少了右大括号，那么应该输出与之相对应的左括号不匹配。</p>
<h2 id="第一次题解"><a href="#第一次题解" class="headerlink" title="第一次题解"></a>第一次题解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 205</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BigL <span class="meta-string">'&#123;'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BigR <span class="meta-string">'&#125;'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SmallL <span class="meta-string">'('</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SmallR <span class="meta-string">')'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUOT 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR <span class="meta-string">'e'</span>	<span class="comment">//用于栈为空时返回栈顶元素（非括号的任意字符都可） </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span>* <span class="title">Stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> top;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">2</span>][MaxSize];	<span class="comment">//0行存储括号，1行存储括号所在行数 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack,<span class="keyword">char</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Top</span><span class="params">(Stack)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsMatch</span><span class="params">(<span class="keyword">char</span>,<span class="keyword">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintStack</span><span class="params">(Stack)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MatchBrace</span><span class="params">(Stack)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp=fopen(<span class="string">"example.c"</span>,<span class="string">"r"</span>);</span><br><span class="line">	<span class="keyword">char</span> <span class="built_in">line</span>[N];</span><br><span class="line">	<span class="keyword">int</span> guide=READ;	<span class="comment">//指导当前应当进行的操作，READ为阅读普通文字，QUOT为正在引号内容当中，NOTE为正在注释当中 </span></span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	Stack S=(Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct StackRecord));</span><br><span class="line">	Stack Save=(Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct StackRecord));</span><br><span class="line">	S-&gt;top=<span class="number">-1</span>;</span><br><span class="line">	Save-&gt;top=<span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(fgets(<span class="built_in">line</span>,N,fp)!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cnt++;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;<span class="built_in">line</span>[i]!=<span class="string">'\0'</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(guide==NOTE)	<span class="comment">//当前为块注释状态</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">line</span>[i]==<span class="string">'*'</span>&amp;&amp;<span class="built_in">line</span>[i+<span class="number">1</span>]==<span class="string">'/'</span>)</span><br><span class="line">					guide=READ;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(guide==QUOT)	<span class="comment">//当前为引号中的内容 </span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">line</span>[i]==<span class="string">'\"'</span>)</span><br><span class="line">					guide=READ; </span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(guide==READ)	<span class="comment">//当前为非注释状态 </span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">line</span>[i]==<span class="string">'/'</span>&amp;&amp;<span class="built_in">line</span>[i+<span class="number">1</span>]==<span class="string">'/'</span>)	<span class="comment">//遇到行注释，直接换下一行 </span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">line</span>[i]==<span class="string">'/'</span>&amp;&amp;<span class="built_in">line</span>[i+<span class="number">1</span>]==<span class="string">'*'</span>)	<span class="comment">//遇到块注释，切换为块注释状态 </span></span><br><span class="line">				&#123;</span><br><span class="line">					guide=NOTE;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">line</span>[i]==<span class="string">'\"'</span>)	<span class="comment">//遇到块注释，切换为块注释状态</span></span><br><span class="line">				&#123;</span><br><span class="line">					guide=QUOT;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">line</span>[i]==BigL||<span class="built_in">line</span>[i]==SmallL)	<span class="comment">//是左括号入栈，同时保存到Save栈 </span></span><br><span class="line">				&#123;</span><br><span class="line">					Push(S,<span class="built_in">line</span>[i],cnt);</span><br><span class="line">					Push(Save,<span class="built_in">line</span>[i],cnt);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">line</span>[i]==BigR||<span class="built_in">line</span>[i]==SmallR)	<span class="comment">//是右括号，匹配检测，同时保存到Save栈 </span></span><br><span class="line">				&#123;</span><br><span class="line">					Push(Save,<span class="built_in">line</span>[i],cnt);</span><br><span class="line">					<span class="keyword">if</span>(IsMatch(Top(S),<span class="built_in">line</span>[i]))<span class="comment">//匹配上，弹出匹配的括号 </span></span><br><span class="line">						Pop(S);</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						Push(S,<span class="built_in">line</span>[i],cnt);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">		PrintStack(Save);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> pos=MatchBrace(S);	<span class="comment">//从头和尾向中间遍历，获取未匹配的括号位置 </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"without maching '%c' at line %d"</span>,S-&gt;str[<span class="number">0</span>][pos],S-&gt;str[<span class="number">1</span>][pos]);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack S,<span class="keyword">char</span> c,<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S-&gt;top==MaxSize<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"wrong!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	S-&gt;str[<span class="number">0</span>][++S-&gt;top]=c;</span><br><span class="line">	S-&gt;str[<span class="number">1</span>][S-&gt;top]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	S-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Top</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">return</span> EOR;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;str[<span class="number">0</span>][S-&gt;top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsMatch</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (a==SmallL&amp;&amp;b==SmallR)||(a==BigL&amp;&amp;b==BigR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;top==<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintStack</span><span class="params">(Stack Save)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	Save-&gt;str[<span class="number">0</span>][Save-&gt;top+<span class="number">1</span>]=<span class="string">'\0'</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=Save-&gt;top;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>,Save-&gt;str[<span class="number">0</span>][i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MatchBrace</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>,j=S-&gt;top;i&lt;=j;i++,j--)</span><br><span class="line">		<span class="keyword">if</span>(!IsMatch(S-&gt;str[<span class="number">0</span>][i],S-&gt;str[<span class="number">0</span>][j]))</span><br><span class="line">			<span class="keyword">return</span> j;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="优秀题解"><a href="#优秀题解" class="headerlink" title="优秀题解"></a>优秀题解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">暂无</span><br></pre></td></tr></table></figure>



<h2 id="反思总结"><a href="#反思总结" class="headerlink" title="反思总结"></a>反思总结</h2><ul>
<li><p>先说思路：设立Save栈和S栈，遇见括号先压入Save栈以保存所有括号。然后左括号入S栈，遇见与之匹配的右括号就出栈，最后栈为空即匹配，否则不匹配。最后要返回不匹配的括号位置（题目规定只有一个）我的想法就是压入栈时顺便压入该括号所在的行数，最后如不匹配，将S栈从头和尾向中间遍历（这更像是一个队列的操作），剩余单个则返回该括号，剩余两个则返回后入栈的那个括号（默认先出现的括号是正确的）</p>
</li>
<li><p>一开始并没做出来，问题在于没有弄清这最后一步，即得到存储剩余括号后如何定位错误括号。原理是这样的：遍历文档时“左括号入栈，右括号出栈”的操作，决定了相邻的匹配括号全被清空，所以最后在只有一个不匹配括号的青空下，格式一定是这样的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>:&#123;((&#123;)&#125;))&#125;	<span class="comment">//单括号多余</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:&#123;((&#123;&#123;)&#125;))&#125;	<span class="comment">//一对括号中右括号缺失</span></span><br></pre></td></tr></table></figure>

<p>很明显，从两边向中间遍历即可得到答案。</p>
</li>
<li><p>第一次题解采用guide的三种状态（READ、NOTE、QUOT）来跳过注释和引号中的内容，可能比较麻烦，理论上采取栈的方式，将引号和注释中的内容视为特殊括号，夹在中间的内容不作考虑，可能会更简单。</p>
</li>
<li><p>在执行for()遍历中，一定要注意continue;和break;的分别和正确使用。比如本题中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(读入一行)</span><br><span class="line">    <span class="keyword">for</span>(逐字遍历)</span><br><span class="line">    &#123;</span><br><span class="line">        这里面的<span class="keyword">continue</span>代表下一个字；</span><br><span class="line">        而<span class="keyword">break</span>则代表下一行。</span><br><span class="line">        另外如果使用<span class="keyword">switch</span>()函数，其中的<span class="keyword">break</span>则只能跳出<span class="keyword">switch</span>，要想跳出<span class="keyword">for</span>需使用<span class="keyword">goto</span>.</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构4|队列-银行排队模拟（生产者-消费者模拟）</title>
    <url>/2020/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%844-%E9%98%9F%E5%88%97-%E9%93%B6%E8%A1%8C%E6%8E%92%E9%98%9F%E6%A8%A1%E6%8B%9F%EF%BC%88%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E6%8B%9F%EF%BC%89/</url>
    <content><![CDATA[<h2 id="题目-（难度：3）"><a href="#题目-（难度：3）" class="headerlink" title="题目 （难度：3）"></a>题目 （难度：3）</h2><h4 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h4><p>一个系统模仿另一个系统行为的技术称为<strong>模拟</strong>，如飞行模拟器。模拟可以用来进行方案论证、人员培训和改进服务。计算机技术常用于模拟系统中。</p>
<p><strong>生产者</strong>-<strong>消费者</strong>（Server-Custom）是常见的应用模式，见于银行、食堂、打印机、医院、超等提供服务和使用服务的应用中。这类应用的主要问题是消费者如果等待（排队）时间过长，会引发用户抱怨，影响服务质量；如果提供服务者（服务窗口）过多，将提高运管商成本。（经济学中排队论）</p>
<p>假设某银行网点有五个服务窗口，分别为三个对私、一个对公和一个外币窗口。银行服务的原则是先来先服务。通常对私业务人很多，其它窗口人则较少，可临时改为对私服务。假设当对私窗口等待服务的客户（按实际服务窗口）平均排队人数超过（大于或等于）7人时，等待客户将可能有抱怨，影响服务质量，此时银行可临时将其它窗口中一个或两个改为对私服务，当客户少于7人时，将立即恢复原有业务。设计一个程序用来模拟银行服务。</p>
<a id="more"></a>

<p>说明：</p>
<ol>
<li><p>增加服务窗口将会增加成本或影响其它业务，因此，以成本增加或影响最小为原则来增加服务窗口，即如果增加一个窗口就能使得按窗口平均等待服务人数小于7人，则只增加一个窗口。一旦按窗口平均等待服务人数小于7人，就减少一个所增加的窗口。</p>
</li>
<li><p>为了简化问题，假设新到客户是在每个服务周期开始时到达。</p>
</li>
<li><p>当等待服务人数发生变化时（新客户到达或有客户已接受服务），则及时计算按实际服务窗口平均等待服务人数，并按相应策略调整服务窗口数（增加或减少额外的服务窗口，但对私窗口不能减少）。<strong>注意：只在获取新客户（不管到达新客户数是否为0）时或已有客户去接受服务时，才按策略调整服务窗口数。进一步讲，增加服务窗口只在有客户到达的周期内进行（也就是说增加窗口是基于客户的感受，银行对增加窗口是不情愿的，因为要增加成本，一旦不再有新客户来，银行是不会再增加服务窗口的）；一旦有客户去接受服务（即等待客户减少），银行将根据策略及时减少服务窗口，因此，在每个周期内，有客户去接受服务后要马上判断是否减少服务窗口（因为能减少成本，银行是积极的）</strong></p>
</li>
</ol>
<p>本问题中假设对公和对外币服务窗口在改为对私服务时及服务期间没有相应因公或外币服务新客户到达（即正好空闲），同时要求以增加成本或影响最小为前提，来尽最大可能减少对私服务客户等待时间。</p>
<h4 id="【输入形式】"><a href="#【输入形式】" class="headerlink" title="【输入形式】"></a>【输入形式】</h4><p>首先输入一个整数表示时间周期数，然后再依次输入每个时间周期中因私业务的客户数。注：一个时间周期指的是银行处理一笔业务的平均处理时间，可以是一分钟、三分钟或其它。例如：</p>
<p>6</p>
<p>2 5 13 11 15  9 </p>
<p>说明：表明在6个时间周期内，第1个周期来了2个（序号分别为1,2），第2个来了5人（序号分别为3,4,5,6,7），以此类推。</p>
<h4 id="【输出形式】"><a href="#【输出形式】" class="headerlink" title="【输出形式】"></a>【输出形式】</h4><p>每个客户等待服务的时间周期数。输出形式如下：</p>
<p>用户序号 : 等待周期数</p>
<p>说明：客户序号与等待周期数之间用符号:分隔，冒号（:）<strong>两边各有一个空格</strong>，等待周期数后直接为回车。</p>
<h4 id="【样例输入】"><a href="#【样例输入】" class="headerlink" title="【样例输入】"></a>【样例输入】</h4><p>4</p>
<p>2 5 13 11</p>
<h4 id="【样例输出】"><a href="#【样例输出】" class="headerlink" title="【样例输出】"></a>【样例输出】</h4><p>1 : 0</p>
<p>2 : 0</p>
<p>3 : 0</p>
<p>4 : 0</p>
<p>5 : 0</p>
<p>6 : 1</p>
<p>7 : 1</p>
<p>8 : 0</p>
<p>9 : 1</p>
<p>10 : 1</p>
<p>11 : 1</p>
<p>12 : 1</p>
<p>13 : 2</p>
<p>14 : 2</p>
<p>15 : 2</p>
<p>16 : 3</p>
<p>17 : 3</p>
<p>18 : 3</p>
<p>19 : 4</p>
<p>20 : 4</p>
<p>21 : 3</p>
<p>22 : 4</p>
<p>23 : 4</p>
<p>24 : 4</p>
<p>25 : 5</p>
<p>26 : 5</p>
<p>27 : 5</p>
<p>28 : 6</p>
<p>29 : 6</p>
<p>30 : 6</p>
<p>31 : 7</p>
<h4 id="【样例说明】"><a href="#【样例说明】" class="headerlink" title="【样例说明】"></a>【样例说明】</h4><p>样例输入表明有四个时间周期，第一个周期来了2人（序号1-2）；第二个周期来了5人（序号3-7）；第三个周期来了13人（序号8-20）；第四个周期来了11人（序号21-31）。由于第一个时间周期内只来了2人，银行（有三个服务窗口）能及时提供服务，因此客户等待时间为0；第二个时间周期内来了5人，银行一个周期内一次只能服务3人，另有2个在下个周期内服务，因此等待时间为1，其它类推。</p>
<h2 id="第一次题解"><a href="#第一次题解" class="headerlink" title="第一次题解"></a>第一次题解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxWindows 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PrivateWindows 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxCustomers 7	<span class="comment">//每个服务窗口平均等待人数线，达到则开新窗口 </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueRecord</span>* <span class="title">Queue</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueRecord</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> front;</span><br><span class="line">	<span class="keyword">int</span> rear;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">array</span>[N];	<span class="comment">//保存等待时间，数组游标即为人的序号 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Iniqueue</span><span class="params">(Queue)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(Queue,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(Queue,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddTime</span><span class="params">(Queue)</span></span>; 	<span class="comment">//给队列每人对应等待时间+1 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintQueue</span><span class="params">(Queue)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Queue q=(Queue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct QueueRecord));</span><br><span class="line">	<span class="keyword">int</span> period;</span><br><span class="line">	<span class="keyword">int</span> cnt;</span><br><span class="line">	<span class="keyword">int</span> windows=PrivateWindows;</span><br><span class="line">	</span><br><span class="line">	Iniqueue(q);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;period);</span><br><span class="line">	<span class="keyword">while</span>(period--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cnt);</span><br><span class="line">		Enqueue(q,cnt);	<span class="comment">//进队</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(q-&gt;<span class="built_in">size</span> &gt;= windows*MaxCustomers &amp;&amp; windows&lt;MaxWindows)	<span class="comment">//加窗口 </span></span><br><span class="line">			windows++;</span><br><span class="line">		</span><br><span class="line">		Dequeue(q,windows);	<span class="comment">//办理业务（出队）</span></span><br><span class="line">		AddTime(q);	<span class="comment">//队中剩下的人等待周期+1</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(q-&gt;<span class="built_in">size</span> &lt; windows*MaxCustomers &amp;&amp; windows&gt;PrivateWindows)	<span class="comment">//减窗口 </span></span><br><span class="line">			windows--;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(q-&gt;<span class="built_in">size</span>!=<span class="number">0</span>)	<span class="comment">//结算剩余队列中的客户</span></span><br><span class="line">	&#123;</span><br><span class="line">		Dequeue(q,windows);</span><br><span class="line">		AddTime(q);</span><br><span class="line">		<span class="keyword">while</span>(q-&gt;<span class="built_in">size</span> &lt; windows*MaxCustomers &amp;&amp; windows&gt;PrivateWindows)</span><br><span class="line">			windows--;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	PrintQueue(q);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Iniqueue</span><span class="params">(Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	q-&gt;<span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line">	q-&gt;front=<span class="number">0</span>;</span><br><span class="line">	q-&gt;rear=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">		q-&gt;<span class="built_in">array</span>[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(Queue q,<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	q-&gt;<span class="built_in">size</span>+=cnt;</span><br><span class="line">	q-&gt;rear+=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(Queue q,<span class="keyword">int</span> windows)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=windows;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(q-&gt;<span class="built_in">size</span>==<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		q-&gt;<span class="built_in">size</span>--;</span><br><span class="line">		q-&gt;front++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddTime</span><span class="params">(Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=q-&gt;front;i&lt;=q-&gt;rear;i++)</span><br><span class="line">		q-&gt;<span class="built_in">array</span>[i]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintQueue</span><span class="params">(Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=q-&gt;rear;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d : %d\n"</span>,i+<span class="number">1</span>,q-&gt;<span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="优秀题解"><a href="#优秀题解" class="headerlink" title="优秀题解"></a>优秀题解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">暂无</span><br></pre></td></tr></table></figure>



<h2 id="反思总结"><a href="#反思总结" class="headerlink" title="反思总结"></a>反思总结</h2><ul>
<li><p>第一次这道题想成了超市排队，即每个窗口一个队列，因此总觉得题目有些不对的地方，得到的数据也有错误。这说明理解题意至关重要。</p>
</li>
<li><p>链表一定要注意任何情况下都能初始化指针（如创建链表时的头指针）；注意特殊数据如0、边界数据等情况。看了舍友的题解，他采用链表处理队列，在debug时发现其错误在于不能处理第一批为0个客户的情况，因为函数中无法对首次为0的情况进行初始化，所以在之后非法访问指针，造成运行时出错。</p>
</li>
<li><p>二重指针空间分配形式：(例如想创建一个指针数组)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> ElementType* PtrToEleType;</span><br><span class="line">PtrToEleType* p=(PtrToEleType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PtrToEleType)*N);	<span class="comment">//创建一个以指针为元素的数组p[N]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)	<span class="comment">//对数组中每一个指针分配空间</span></span><br><span class="line">    p[i]=(PtrToEleType)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElementType));</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>队列</tag>
      </tags>
  </entry>
</search>
